---
# This is an example playbook to execute Ansible tests.

- name: Verify
  hosts: compute-1
  gather_facts: false
  vars:
    test_helper_dir: "../../../../molecule/test-helpers"
    edpm_nova_tls_ca_src_dir: /tmp/pki
  tasks:
    - name: ensure expected directories exist
      ansible.builtin.include_tasks: "{{test_helper_dir}}/verify_dir.yaml"
      loop:
        # common directories
        - "/etc/tmpfiles.d/"
        - "/var/lib/openstack"
        - "/var/lib/openstack/config/containers"
        - "/var/log/containers"
        - "/var/log/containers/stdouts"
        - "/etc/ssh/ssh_known_hosts"
        # extrenal deps
        - "/var/lib/openstack/config/ceph"
         # nova directories
        - "/var/lib/nova"
        - "/var/lib/openstack/config/nova"
        - "/var/lib/_nova_secontext"
        - "/var/lib/nova/instances"
        - "/var/log/containers/nova"
        # NOTE(sean-k-mooney): this directory is normaly created by the edpm_install_cert role
        # in molecule we create it in prepare so lets just assert it exists
        - "{{ edpm_nova_tls_ca_src_dir }}"

    - name: ensure extra mounts are present
      ansible.builtin.include_tasks: "{{test_helper_dir}}/verify_mounts.yaml"
      loop:
        - { "name": "nova_compute", "src": "/var/lib/vendor_integration",
            "dest": "/var/lib/vendor_integration" }
        - { "name": "nova_compute", "src": "/opt/vendor_integration_2",
            "dest": "/opt/vendor_integration_2", "options": "shared" }

    - name: ensure systemd services are defined and functional
      ansible.builtin.include_tasks: "{{test_helper_dir}}/verify_systemd_unit.yaml"
      loop:
        - { "name": "edpm_nova_compute.service" }
        - { "name": "nova_compute_nvme_cleanup.service" }
    - name: ensure podman container exists and are running
      ansible.builtin.include_tasks: "{{test_helper_dir}}/verify_podman.yaml"
      loop:
        - "nova_compute"
    - name: ensure kolla_set_configs copied the expected files
      become: true
      ansible.builtin.shell: |
        podman logs nova_compute 2>&1 | grep "{{item}}" > /dev/null
      loop:
        - "Copying /var/lib/kolla/config_files/nova-blank.conf to /etc/nova/nova.conf"
        - "Copying /var/lib/kolla/config_files/01-nova.conf to /etc/nova/nova.conf.d/01-nova.conf"
        - "Copying /var/lib/kolla/config_files/02-nova-log.conf to /etc/nova/nova.conf.d/02-nova-log.conf"
        - "Copying /var/lib/kolla/config_files/ssh-config to /var/lib/nova/.ssh/config"
        - "Copying /var/lib/kolla/config_files/ssh-privatekey to /var/lib/nova/.ssh/ssh-privatekey"
        - "Copying /var/lib/kolla/config_files/02-nova-host-specific.conf to /etc/nova/nova.conf.d/02-nova-host-specific.conf"
        - "Copying /var/lib/kolla/config_files/provider1.yaml to /etc/nova/provider_config/provider1.yaml"

    - name: slurp host specific config
      ansible.builtin.slurp:
        src: /var/lib/openstack/config/nova/02-nova-host-specific.conf
      register: host_specific_config

    - name: Assert that my_ip is rendered into the host specific config
      ansible.builtin.assert:
        that:
          - "'10.0.0.3' in host_specific_config.content | b64decode"

    - name: Assert libvirt is configured to use tls for live migration
      ansible.builtin.assert:
        that:
          - "'live_migration_with_native_tls = True' in host_specific_config.content | b64decode"
          - "'live_migration_uri = qemu+tls://%s/system' in host_specific_config.content | b64decode"

    - name: Assert that host is rendered into the host specific config
      ansible.builtin.assert:
        that:
          - "'edpm-0.localdomain' in host_specific_config.content | b64decode"

    - name: Check if user exists
      ansible.builtin.getent:
        database: passwd
        key: nova
      register: nova_user

    - name: Assert that nova user is created with kolla uid and gid
      ansible.builtin.assert:
        that:
          # user
          - "nova_user.ansible_facts.getent_passwd.nova[1] == '42436'"
          # group
          - "nova_user.ansible_facts.getent_passwd.nova[2] == '42436'"

    - name: Lookup libvirt group
      ansible.builtin.getent:
        database: group
        key: libvirt
      register: libvirt_group

    - name: Assert that nova is in the libvirt group
      ansible.builtin.assert:
        that:
          # 2: the users in the group
          - "'nova' in libvirt_group.ansible_facts.getent_group.libvirt[2]"

    - name: Stat /home/nova/.ssh/authorized_keys
      become: true
      ansible.builtin.stat:
        path: /home/nova/.ssh/authorized_keys
      register: nova_authorized_keys

    - name: Assert that nova user has authorized_keys on the host
      ansible.builtin.assert:
        that:
          - "nova_authorized_keys.stat.mode == '0600'"

    - name: Stat /var/lib/nova/compute_id
      become: true
      ansible.builtin.stat:
        path: /var/lib/nova/compute_id
      register: compute_id

    - name: Assert that compute_id exists, not empty, and read-only
      ansible.builtin.assert:
        that:
          - "compute_id.stat.size == 37"
          - "compute_id.stat.mode == '0400'"
          - "compute_id.stat.attr_flags == 'i'"

    - name: Check if after sync old file is removed
      ansible.builtin.stat:
        path: '/var/lib/openstack/config/nova/test.conf'
      register: nova_host_specific_conf

    - name: Assert that /var/lib/openstack/config/nova/test.conf file does not exist
      ansible.builtin.assert:
        that:
          - "not nova_host_specific_conf.stat.exists"
